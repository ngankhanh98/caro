{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Square","props","key","className","onClick","style","winningSquare","backgroundColor","value","Board","i","this","winner","includes","console","log","squares","board","row","j","push","renderSquare","createBoard","React","Component","Game","state","history","Array","fill","locations","stepNumber","xIsNext","selectedStep","winArea","slice","length","Math","floor","col","count","k","inital_pos","inital_pos_anti","calculateWinner","setState","concat","step","xNext","status","current","moves","map","move","location","colrow","desc","jumpTo","handleClick","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1741a99f.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\n\r\nfunction Square(props) {\r\n  const highlightwin = {\r\n    backgroundColor: 'yellow'\r\n  };\r\n\r\n  return (\r\n    <button key={props.key} className=\"square\" onClick={props.onClick} style={props.winningSquare? highlightwin : null}>\r\n      {props.value}\r\n    </button>\r\n  );\r\n}\r\n\r\nclass Board extends React.Component {\r\n  renderSquare(i) {\r\n   \r\n    let winningSquare = this.props.winner && this.props.winner.includes(i) ? true : false;\r\n    console.log(winningSquare);\r\n    return (\r\n      <Square\r\n        key={i}\r\n        value={this.props.squares[i]}\r\n        onClick={() => this.props.onClick(i)}\r\n        winningSquare={winningSquare}\r\n      />\r\n    );\r\n  }\r\n  createBoard() {\r\n    let board = []\r\n    for (let i = 0; i < 20; i++) {\r\n      let row = []\r\n      for (let j = 0; j < 20; j++) {\r\n        /*row.push(<Square value={this.state.squares[20 * i + j]} onClick={() => this.handleClick(20 * i + j)} />)*/\r\n        row.push(this.renderSquare(20 * i + j))\r\n      }\r\n      board.push(<div className=\"board-row\">{row}</div>);\r\n    }\r\n    return board;\r\n  }\r\n  render() {\r\n    return (\r\n      this.createBoard()\r\n    );\r\n  }\r\n}\r\n\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      history: [\r\n        {\r\n          squares: Array(400).fill(null)\r\n        }\r\n      ],\r\n      locations:[], // array stores location of individual move\r\n      stepNumber: 0,\r\n      xIsNext: true,\r\n      winner: null,\r\n      selectedStep: null,\r\n      winArea: [], // array stores winning locations\r\n    };\r\n  }\r\n\r\n  handleClick(i) {\r\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n    const locations = this.state.locations.slice();\r\n    const board = this.state.history[this.state.stepNumber];\r\n    const current = history[history.length - 1];\r\n    const squares = current.squares.slice();\r\n    let winner;\r\n    let winArea;\r\n\r\n    if (this.state.winner || squares[i]) {\r\n      return;\r\n    }\r\n    squares[i] = this.state.xIsNext ? \"X\" : \"O\";\r\n    locations.push(i);\r\n    winArea = calculateWinner(i, board, squares[i]);\r\n    if (winArea.length ===5)\r\n    {\r\n        winner = squares[i];\r\n    }\r\n    this.setState({ winner: winner, winArea: winArea});\r\n  \r\n    this.setState({\r\n      history: history.concat([\r\n        {\r\n          squares: squares\r\n        }\r\n      ]),\r\n      stepNumber: history.length,\r\n      xIsNext: !this.state.xIsNext,\r\n      locations: locations,\r\n      \r\n    });\r\n  \r\n  }\r\n\r\n  jumpTo(step) {\r\n    // reset the game\r\n    if(step===0)\r\n    {\r\n      this.setState({ history: [{ squares: Array(400).fill(null) }], winner: null, xNext: true, stepNumber: 0 });\r\n    } else{\r\n    this.setState({\r\n      stepNumber: step,\r\n      xIsNext: (step % 2) === 0\r\n    });\r\n    }\r\n    this.setState({selectedStep: step});\r\n}\r\n\r\n  render() {\r\n    const history = this.state.history;\r\n    const current = history[this.state.stepNumber];\r\n    const winner = this.state.winner;\r\n    const winArea = this.state.winArea;\r\n\r\n    \r\n    const moves = history.map((step, move) => {\r\n      const location = this.state.locations;\r\n\r\n      let row = Math.floor(location[move-1] / 20);\r\n      let col = location[move-1] % 20;\r\n      let colrow = col!=null && row!=null ? ` (${col}, ${row})`:``;\r\n\r\n      const desc = move ?\r\n        'Go to move #' + move + colrow :\r\n        'Go to game start';\r\n      return (\r\n        <li key={move}>\r\n          <button onClick={() => this.jumpTo(move)} className={this.state.selectedStep !== move ? '' : 'bold'}>{desc}</button>\r\n        </li>\r\n      );\r\n    });\r\n\r\n    let status;\r\n    if (winner) {\r\n      status = \"Winner: \" + winner;\r\n    } else {\r\n      status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\r\n    }\r\n\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <Board\r\n            squares={current.squares}\r\n            onClick={i => this.handleClick(i)}\r\n            winner={winner && winArea.length === 5 ? winArea:null}\r\n          />\r\n        </div>\r\n        <div className=\"game-info\">\r\n          <div>{status}</div>\r\n          <ol>{moves}</ol>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction calculateWinner(i, squares, value) {\r\n  let row = Math.floor(i / 20);\r\n  let col = i % 20;\r\n  let count = 0;\r\n  let winArea = [];\r\n\r\n\r\n  // check row\r\n  for (let k = 0; k < 20; k++) {\r\n    if (squares.squares[row * 20 + k] !== value) {\r\n      count = 0;\r\n      winArea = winArea.slice(0,0);\r\n    }\r\n    else {\r\n      count++;\r\n      winArea.push(row * 20 + k);\r\n    }\r\n    if (count === 4) {\r\n      winArea.push(i);\r\n      return winArea;\r\n    }\r\n  }\r\n  \r\n\r\n  // check col\r\n  for (let k = 0; k < 20; k++) {\r\n    if (squares.squares[k * 20 + col] !== value) {\r\n      count = 0;\r\n      winArea = winArea.slice(0, 0);\r\n    }\r\n    else {\r\n      count++;\r\n      winArea.push(k * 20 + col);\r\n    }\r\n    if (count === 4) {\r\n      winArea.push(i);      \r\n      return winArea;\r\n    }\r\n  }\r\n  // check diagonal\r\n  let inital_pos = i % 21;\r\n  for (let k = 0; k < 20; k++) {\r\n    if (squares.squares[inital_pos + 21 * k] !== value) {\r\n      count = 0;\r\n      winArea = winArea.slice(0, 0);\r\n    }\r\n    else {\r\n      count++;\r\n      winArea.push(inital_pos + 21 * k);\r\n    }\r\n    if (count === 4) {\r\n      winArea.push(i);\r\n      return winArea;\r\n    }\r\n  }\r\n  // check anti-diagonal\r\n  let inital_pos_anti = i % 21 + 2 * row;\r\n\r\n  for (let k = 0; k < 20; k++) {\r\n    if (squares.squares[inital_pos_anti + 19 * k] !== value) {\r\n      count = 0;\r\n      winArea = winArea.slice(0, 0);\r\n    }\r\n    else {\r\n      count++;\r\n      winArea.push(inital_pos_anti + 19 * k);\r\n    }\r\n    if (count === 4) {\r\n      winArea.push(i);\r\n      return winArea;\r\n    }\r\n  }\r\n  return winArea;\r\n}\r\n\r\nexport default Game;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Game from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<Game />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}